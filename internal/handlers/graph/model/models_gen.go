// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type FilterDate struct {
	StartDate string `json:"startDate"`
	EndDate   string `json:"endDate"`
}

type Order struct {
	ID        int          `json:"id"`
	User      *User        `json:"user"`
	Status    Status       `json:"status"`
	CreatedAt *string      `json:"createdAt,omitempty"`
	UpdatedAt *string      `json:"updatedAt,omitempty"`
	Total     *float64     `json:"total,omitempty"`
	Items     []*OrderItem `json:"items"`
}

type OrderItem struct {
	ID        int      `json:"id"`
	Order     *Order   `json:"order"`
	Product   *Product `json:"product"`
	Price     float64  `json:"price"`
	Quantity  int      `json:"quantity"`
	CreatedAt string   `json:"createdAt"`
	UpdatedAt string   `json:"updatedAt"`
}

type OrderItemRequest struct {
	ID        *int `json:"id,omitempty"`
	ProductID int  `json:"productID"`
	Quantity  int  `json:"quantity"`
}

type OrderRequest struct {
	UserID int                 `json:"userID"`
	Status Status              `json:"status"`
	Items  []*OrderItemRequest `json:"items"`
}

type OrderResponse struct {
	Order      []*Order `json:"order"`
	TotalCount int      `json:"totalCount"`
}

type PaginationInput struct {
	Limit int `json:"limit"`
	Page  int `json:"page"`
}

type Payment struct {
	ID             int    `json:"id"`
	UserID         int    `json:"userID"`
	PaymentMethod  string `json:"paymentMethod"`
	CardNumber     int    `json:"cardNumber"`
	ExpirationDate string `json:"expirationDate"`
	CreatedAt      string `json:"createdAt"`
	UpdatedAt      string `json:"updatedAt"`
}

type PaymentDetail struct {
	ID        int     `json:"id"`
	PaymentID int     `json:"paymentID"`
	OrderID   int     `json:"orderID"`
	Price     float64 `json:"price"`
	CreatedAt string  `json:"createdAt"`
	UpdatedAt string  `json:"updatedAt"`
}

type Product struct {
	ID          int              `json:"id"`
	Name        string           `json:"name"`
	Description string           `json:"description"`
	Price       float64          `json:"price"`
	Quantity    int              `json:"quantity"`
	Category    *ProductCategory `json:"category"`
	Author      *User            `json:"author"`
	CreatedAt   string           `json:"createdAt"`
	UpdatedAt   string           `json:"updatedAt"`
}

type ProductCategory struct {
	ID          int    `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	CreatedAt   string `json:"createdAt"`
	UpdatedAt   string `json:"updatedAt"`
}

type ProductRequest struct {
	Name         string  `json:"name"`
	Description  string  `json:"description"`
	Price        float64 `json:"price"`
	Quantity     int     `json:"quantity"`
	CategoryName string  `json:"categoryName"`
	AuthorID     int     `json:"authorID"`
}

type Sorting struct {
	ColumnName string `json:"columnName"`
	Desc       bool   `json:"desc"`
}

type SortingInput struct {
	Column []*Sorting `json:"column,omitempty"`
}

type User struct {
	ID        int      `json:"id"`
	Name      string   `json:"name"`
	Email     string   `json:"email"`
	Role      string   `json:"role"`
	CreatedAt string   `json:"createdAt"`
	UpdatedAt string   `json:"updatedAt"`
	Status    string   `json:"status"`
	Orders    []*Order `json:"orders"`
}

type Status string

const (
	StatusNew       Status = "NEW"
	StatusPending   Status = "PENDING"
	StatusPaid      Status = "PAID"
	StatusCancelled Status = "CANCELLED"
)

var AllStatus = []Status{
	StatusNew,
	StatusPending,
	StatusPaid,
	StatusCancelled,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusNew, StatusPending, StatusPaid, StatusCancelled:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
