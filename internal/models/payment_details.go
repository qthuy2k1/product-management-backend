// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PaymentDetail is an object representing the database table.
type PaymentDetail struct {
	ID        int             `boil:"id" json:"id" toml:"id" yaml:"id"`
	PaymentID int             `boil:"payment_id" json:"payment_id" toml:"payment_id" yaml:"payment_id"`
	OrderID   int             `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	Price     decimal.Decimal `boil:"price" json:"price" toml:"price" yaml:"price"`
	CreatedAt time.Time       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time       `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *paymentDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentDetailColumns = struct {
	ID        string
	PaymentID string
	OrderID   string
	Price     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	PaymentID: "payment_id",
	OrderID:   "order_id",
	Price:     "price",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var PaymentDetailTableColumns = struct {
	ID        string
	PaymentID string
	OrderID   string
	Price     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "payment_details.id",
	PaymentID: "payment_details.payment_id",
	OrderID:   "payment_details.order_id",
	Price:     "payment_details.price",
	CreatedAt: "payment_details.created_at",
	UpdatedAt: "payment_details.updated_at",
}

// Generated where

var PaymentDetailWhere = struct {
	ID        whereHelperint
	PaymentID whereHelperint
	OrderID   whereHelperint
	Price     whereHelperdecimal_Decimal
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"payment_details\".\"id\""},
	PaymentID: whereHelperint{field: "\"payment_details\".\"payment_id\""},
	OrderID:   whereHelperint{field: "\"payment_details\".\"order_id\""},
	Price:     whereHelperdecimal_Decimal{field: "\"payment_details\".\"price\""},
	CreatedAt: whereHelpertime_Time{field: "\"payment_details\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"payment_details\".\"updated_at\""},
}

// PaymentDetailRels is where relationship names are stored.
var PaymentDetailRels = struct {
	Order   string
	Payment string
}{
	Order:   "Order",
	Payment: "Payment",
}

// paymentDetailR is where relationships are stored.
type paymentDetailR struct {
	Order   *Order   `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
	Payment *Payment `boil:"Payment" json:"Payment" toml:"Payment" yaml:"Payment"`
}

// NewStruct creates a new relationship struct
func (*paymentDetailR) NewStruct() *paymentDetailR {
	return &paymentDetailR{}
}

func (r *paymentDetailR) GetOrder() *Order {
	if r == nil {
		return nil
	}
	return r.Order
}

func (r *paymentDetailR) GetPayment() *Payment {
	if r == nil {
		return nil
	}
	return r.Payment
}

// paymentDetailL is where Load methods for each relationship are stored.
type paymentDetailL struct{}

var (
	paymentDetailAllColumns            = []string{"id", "payment_id", "order_id", "price", "created_at", "updated_at"}
	paymentDetailColumnsWithoutDefault = []string{"payment_id", "order_id", "price"}
	paymentDetailColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	paymentDetailPrimaryKeyColumns     = []string{"id"}
	paymentDetailGeneratedColumns      = []string{}
)

type (
	// PaymentDetailSlice is an alias for a slice of pointers to PaymentDetail.
	// This should almost always be used instead of []PaymentDetail.
	PaymentDetailSlice []*PaymentDetail
	// PaymentDetailHook is the signature for custom PaymentDetail hook methods
	PaymentDetailHook func(context.Context, boil.ContextExecutor, *PaymentDetail) error

	paymentDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentDetailType                 = reflect.TypeOf(&PaymentDetail{})
	paymentDetailMapping              = queries.MakeStructMapping(paymentDetailType)
	paymentDetailPrimaryKeyMapping, _ = queries.BindMapping(paymentDetailType, paymentDetailMapping, paymentDetailPrimaryKeyColumns)
	paymentDetailInsertCacheMut       sync.RWMutex
	paymentDetailInsertCache          = make(map[string]insertCache)
	paymentDetailUpdateCacheMut       sync.RWMutex
	paymentDetailUpdateCache          = make(map[string]updateCache)
	paymentDetailUpsertCacheMut       sync.RWMutex
	paymentDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentDetailAfterSelectHooks []PaymentDetailHook

var paymentDetailBeforeInsertHooks []PaymentDetailHook
var paymentDetailAfterInsertHooks []PaymentDetailHook

var paymentDetailBeforeUpdateHooks []PaymentDetailHook
var paymentDetailAfterUpdateHooks []PaymentDetailHook

var paymentDetailBeforeDeleteHooks []PaymentDetailHook
var paymentDetailAfterDeleteHooks []PaymentDetailHook

var paymentDetailBeforeUpsertHooks []PaymentDetailHook
var paymentDetailAfterUpsertHooks []PaymentDetailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentDetailHook registers your hook function for all future operations.
func AddPaymentDetailHook(hookPoint boil.HookPoint, paymentDetailHook PaymentDetailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		paymentDetailAfterSelectHooks = append(paymentDetailAfterSelectHooks, paymentDetailHook)
	case boil.BeforeInsertHook:
		paymentDetailBeforeInsertHooks = append(paymentDetailBeforeInsertHooks, paymentDetailHook)
	case boil.AfterInsertHook:
		paymentDetailAfterInsertHooks = append(paymentDetailAfterInsertHooks, paymentDetailHook)
	case boil.BeforeUpdateHook:
		paymentDetailBeforeUpdateHooks = append(paymentDetailBeforeUpdateHooks, paymentDetailHook)
	case boil.AfterUpdateHook:
		paymentDetailAfterUpdateHooks = append(paymentDetailAfterUpdateHooks, paymentDetailHook)
	case boil.BeforeDeleteHook:
		paymentDetailBeforeDeleteHooks = append(paymentDetailBeforeDeleteHooks, paymentDetailHook)
	case boil.AfterDeleteHook:
		paymentDetailAfterDeleteHooks = append(paymentDetailAfterDeleteHooks, paymentDetailHook)
	case boil.BeforeUpsertHook:
		paymentDetailBeforeUpsertHooks = append(paymentDetailBeforeUpsertHooks, paymentDetailHook)
	case boil.AfterUpsertHook:
		paymentDetailAfterUpsertHooks = append(paymentDetailAfterUpsertHooks, paymentDetailHook)
	}
}

// One returns a single paymentDetail record from the query.
func (q paymentDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentDetail, error) {
	o := &PaymentDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for payment_details")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentDetail records from the query.
func (q paymentDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentDetailSlice, error) {
	var o []*PaymentDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PaymentDetail slice")
	}

	if len(paymentDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentDetail records in the query.
func (q paymentDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count payment_details rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if payment_details exists")
	}

	return count > 0, nil
}

// Order pointed to by the foreign key.
func (o *PaymentDetail) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// Payment pointed to by the foreign key.
func (o *PaymentDetail) Payment(mods ...qm.QueryMod) paymentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	return Payments(queryMods...)
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentDetailL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentDetail interface{}, mods queries.Applicator) error {
	var slice []*PaymentDetail
	var object *PaymentDetail

	if singular {
		var ok bool
		object, ok = maybePaymentDetail.(*PaymentDetail)
		if !ok {
			object = new(PaymentDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaymentDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaymentDetail))
			}
		}
	} else {
		s, ok := maybePaymentDetail.(*[]*PaymentDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaymentDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaymentDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentDetailR{}
		}
		args = append(args, object.OrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentDetailR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(paymentDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.PaymentDetails = append(foreign.R.PaymentDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.ID {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.PaymentDetails = append(foreign.R.PaymentDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentDetailL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentDetail interface{}, mods queries.Applicator) error {
	var slice []*PaymentDetail
	var object *PaymentDetail

	if singular {
		var ok bool
		object, ok = maybePaymentDetail.(*PaymentDetail)
		if !ok {
			object = new(PaymentDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaymentDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaymentDetail))
			}
		}
	} else {
		s, ok := maybePaymentDetail.(*[]*PaymentDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaymentDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaymentDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentDetailR{}
		}
		args = append(args, object.PaymentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentDetailR{}
			}

			for _, a := range args {
				if a == obj.PaymentID {
					continue Outer
				}
			}

			args = append(args, obj.PaymentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payments`),
		qm.WhereIn(`payments.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Payment")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Payment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for payments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payments")
	}

	if len(paymentDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentR{}
		}
		foreign.R.PaymentDetails = append(foreign.R.PaymentDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentID == foreign.ID {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.PaymentDetails = append(foreign.R.PaymentDetails, local)
				break
			}
		}
	}

	return nil
}

// SetOrder of the paymentDetail to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.PaymentDetails.
func (o *PaymentDetail) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"payment_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, paymentDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.ID
	if o.R == nil {
		o.R = &paymentDetailR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			PaymentDetails: PaymentDetailSlice{o},
		}
	} else {
		related.R.PaymentDetails = append(related.R.PaymentDetails, o)
	}

	return nil
}

// SetPayment of the paymentDetail to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.PaymentDetails.
func (o *PaymentDetail) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Payment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"payment_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"payment_id"}),
		strmangle.WhereClause("\"", "\"", 2, paymentDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentID = related.ID
	if o.R == nil {
		o.R = &paymentDetailR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentR{
			PaymentDetails: PaymentDetailSlice{o},
		}
	} else {
		related.R.PaymentDetails = append(related.R.PaymentDetails, o)
	}

	return nil
}

// PaymentDetails retrieves all the records using an executor.
func PaymentDetails(mods ...qm.QueryMod) paymentDetailQuery {
	mods = append(mods, qm.From("\"payment_details\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"payment_details\".*"})
	}

	return paymentDetailQuery{q}
}

// FindPaymentDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentDetail(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PaymentDetail, error) {
	paymentDetailObj := &PaymentDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"payment_details\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, paymentDetailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from payment_details")
	}

	if err = paymentDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return paymentDetailObj, err
	}

	return paymentDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payment_details provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentDetailInsertCacheMut.RLock()
	cache, cached := paymentDetailInsertCache[key]
	paymentDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentDetailAllColumns,
			paymentDetailColumnsWithDefault,
			paymentDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentDetailType, paymentDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentDetailType, paymentDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"payment_details\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"payment_details\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into payment_details")
	}

	if !cached {
		paymentDetailInsertCacheMut.Lock()
		paymentDetailInsertCache[key] = cache
		paymentDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentDetailUpdateCacheMut.RLock()
	cache, cached := paymentDetailUpdateCache[key]
	paymentDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentDetailAllColumns,
			paymentDetailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update payment_details, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"payment_details\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, paymentDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentDetailType, paymentDetailMapping, append(wl, paymentDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update payment_details row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for payment_details")
	}

	if !cached {
		paymentDetailUpdateCacheMut.Lock()
		paymentDetailUpdateCache[key] = cache
		paymentDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for payment_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for payment_details")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"payment_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, paymentDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in paymentDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all paymentDetail")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payment_details provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentDetailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentDetailUpsertCacheMut.RLock()
	cache, cached := paymentDetailUpsertCache[key]
	paymentDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentDetailAllColumns,
			paymentDetailColumnsWithDefault,
			paymentDetailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			paymentDetailAllColumns,
			paymentDetailPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert payment_details, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(paymentDetailPrimaryKeyColumns))
			copy(conflict, paymentDetailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"payment_details\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(paymentDetailType, paymentDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentDetailType, paymentDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert payment_details")
	}

	if !cached {
		paymentDetailUpsertCacheMut.Lock()
		paymentDetailUpsertCache[key] = cache
		paymentDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentDetailPrimaryKeyMapping)
	sql := "DELETE FROM \"payment_details\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from payment_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for payment_details")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from payment_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payment_details")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"payment_details\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from paymentDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payment_details")
	}

	if len(paymentDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentDetail(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"payment_details\".* FROM \"payment_details\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentDetailSlice")
	}

	*o = slice

	return nil
}

// PaymentDetailExists checks if the PaymentDetail row exists.
func PaymentDetailExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"payment_details\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if payment_details exists")
	}

	return exists, nil
}
