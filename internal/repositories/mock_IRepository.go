// Code generated by mockery v2.20.0. DO NOT EDIT.

package repositories

import (
	context "context"

	models "github.com/qthuy2k1/product-management/internal/models"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx
func (_m *MockIRepository) BeginTx(ctx context.Context) (*sql.Tx, error) {
	ret := _m.Called(ctx)

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sql.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sql.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTx provides a mock function with given fields: tx
func (_m *MockIRepository) CommitTx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: ctx, tx, oReq
func (_m *MockIRepository) CreateOrder(ctx context.Context, tx *sql.Tx, oReq Order) (models.Order, error) {
	ret := _m.Called(ctx, tx, oReq)

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, Order) (models.Order, error)); ok {
		return rf(ctx, tx, oReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, Order) models.Order); ok {
		r0 = rf(ctx, tx, oReq)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, Order) error); ok {
		r1 = rf(ctx, tx, oReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrderItem provides a mock function with given fields: ctx, tx, oiReq, order
func (_m *MockIRepository) CreateOrderItem(ctx context.Context, tx *sql.Tx, oiReq []OrderItem, order models.Order) error {
	ret := _m.Called(ctx, tx, oiReq, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, []OrderItem, models.Order) error); ok {
		r0 = rf(ctx, tx, oiReq, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProduct provides a mock function with given fields: ctx, productRequest
func (_m *MockIRepository) CreateProduct(ctx context.Context, productRequest Product) error {
	ret := _m.Called(ctx, productRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Product) error); ok {
		r0 = rf(ctx, productRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProductCategory provides a mock function with given fields: ctx, productCategory
func (_m *MockIRepository) CreateProductCategory(ctx context.Context, productCategory ProductCategory) error {
	ret := _m.Called(ctx, productCategory)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ProductCategory) error); ok {
		r0 = rf(ctx, productCategory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockIRepository) CreateUser(ctx context.Context, user User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: ctx, id
func (_m *MockIRepository) DeleteProduct(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrder provides a mock function with given fields: ctx, orderID
func (_m *MockIRepository) GetOrder(ctx context.Context, orderID int) (models.Order, error) {
	ret := _m.Called(ctx, orderID)

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderItem provides a mock function with given fields: ctx, id
func (_m *MockIRepository) GetOrderItem(ctx context.Context, id int) (models.OrderItem, error) {
	ret := _m.Called(ctx, id)

	var r0 models.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.OrderItem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.OrderItem); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.OrderItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, filter
func (_m *MockIRepository) GetOrders(ctx context.Context, filter OrderFilterRepo) ([]OrderOutputGraph, int64, error) {
	ret := _m.Called(ctx, filter)

	var r0 []OrderOutputGraph
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, OrderFilterRepo) ([]OrderOutputGraph, int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, OrderFilterRepo) []OrderOutputGraph); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]OrderOutputGraph)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, OrderFilterRepo) int64); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, OrderFilterRepo) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProduct provides a mock function with given fields: ctx, id
func (_m *MockIRepository) GetProduct(ctx context.Context, id int) (models.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductCategory provides a mock function with given fields: ctx, id
func (_m *MockIRepository) GetProductCategory(ctx context.Context, id int) (models.ProductCategory, error) {
	ret := _m.Called(ctx, id)

	var r0 models.ProductCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.ProductCategory, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.ProductCategory); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.ProductCategory)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductCategoryByName provides a mock function with given fields: ctx, name
func (_m *MockIRepository) GetProductCategoryByName(ctx context.Context, name string) (models.ProductCategory, error) {
	ret := _m.Called(ctx, name)

	var r0 models.ProductCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.ProductCategory, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.ProductCategory); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(models.ProductCategory)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductCategoryDefault provides a mock function with given fields: ctx
func (_m *MockIRepository) GetProductCategoryDefault(ctx context.Context) (models.ProductCategory, error) {
	ret := _m.Called(ctx)

	var r0 models.ProductCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.ProductCategory, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.ProductCategory); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.ProductCategory)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: ctx, filter
func (_m *MockIRepository) GetProducts(ctx context.Context, filter ProductRepoFilter) ([]ProductOutput, error) {
	ret := _m.Called(ctx, filter)

	var r0 []ProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ProductRepoFilter) ([]ProductOutput, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ProductRepoFilter) []ProductOutput); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ProductRepoFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsGraph provides a mock function with given fields: ctx, filter
func (_m *MockIRepository) GetProductsGraph(ctx context.Context, filter ProductRepoFilter) ([]GetProductsGraph, error) {
	ret := _m.Called(ctx, filter)

	var r0 []GetProductsGraph
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ProductRepoFilter) ([]GetProductsGraph, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ProductRepoFilter) []GetProductsGraph); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GetProductsGraph)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ProductRepoFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *MockIRepository) GetUser(ctx context.Context, id int) (models.User, error) {
	ret := _m.Called(ctx, id)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDefault provides a mock function with given fields: ctx
func (_m *MockIRepository) GetUserDefault(ctx context.Context) (models.User, error) {
	ret := _m.Called(ctx)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.User); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackTx provides a mock function with given fields: tx
func (_m *MockIRepository) RollbackTx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrder provides a mock function with given fields: ctx, tx, orderReq
func (_m *MockIRepository) UpdateOrder(ctx context.Context, tx *sql.Tx, orderReq models.Order) error {
	ret := _m.Called(ctx, tx, orderReq)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, models.Order) error); ok {
		r0 = rf(ctx, tx, orderReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderItem provides a mock function with given fields: ctx, tx, id, oiReq
func (_m *MockIRepository) UpdateOrderItem(ctx context.Context, tx *sql.Tx, id int, oiReq OrderItem) error {
	ret := _m.Called(ctx, tx, id, oiReq)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int, OrderItem) error); ok {
		r0 = rf(ctx, tx, id, oiReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProduct provides a mock function with given fields: ctx, tx, pReq
func (_m *MockIRepository) UpdateProduct(ctx context.Context, tx *sql.Tx, pReq models.Product) error {
	ret := _m.Called(ctx, tx, pReq)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, models.Product) error); ok {
		r0 = rf(ctx, tx, pReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertProducts provides a mock function with given fields: ctx, products
func (_m *MockIRepository) UpsertProducts(ctx context.Context, products []Product) error {
	ret := _m.Called(ctx, products)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []Product) error); ok {
		r0 = rf(ctx, products)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockIRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIRepository(t mockConstructorTestingTNewMockIRepository) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
