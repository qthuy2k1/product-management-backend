// Code generated by mockery v2.20.0. DO NOT EDIT.

package controllers

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	models "github.com/qthuy2k1/product-management/internal/models"

	multipart "mime/multipart"

	repositories "github.com/qthuy2k1/product-management/internal/repositories"
)

// MockIController is an autogenerated mock type for the IController type
type MockIController struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, orderInput, orderItemsInput
func (_m *MockIController) CreateOrder(ctx context.Context, orderInput OrderInput, orderItemsInput []OrderItemInput) error {
	ret := _m.Called(ctx, orderInput, orderItemsInput)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, OrderInput, []OrderItemInput) error); ok {
		r0 = rf(ctx, orderInput, orderItemsInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProduct provides a mock function with given fields: ctx, productInput
func (_m *MockIController) CreateProduct(ctx context.Context, productInput ProductInput) error {
	ret := _m.Called(ctx, productInput)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ProductInput) error); ok {
		r0 = rf(ctx, productInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProductCategory provides a mock function with given fields: ctx, pCateInput
func (_m *MockIController) CreateProductCategory(ctx context.Context, pCateInput PCateInput) error {
	ret := _m.Called(ctx, pCateInput)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, PCateInput) error); ok {
		r0 = rf(ctx, pCateInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockIController) CreateUser(ctx context.Context, user UserInput) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UserInput) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: ctx, id
func (_m *MockIController) DeleteProduct(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportProductsToCSV provides a mock function with given fields: ctx, filter
func (_m *MockIController) ExportProductsToCSV(ctx context.Context, filter ProductCtrlFilter) (io.Reader, error) {
	ret := _m.Called(ctx, filter)

	var r0 io.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ProductCtrlFilter) (io.Reader, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ProductCtrlFilter) io.Reader); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ProductCtrlFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, filter
func (_m *MockIController) GetOrders(ctx context.Context, filter OrderFilterCtrl) ([]OrderOutputGraph, int64, error) {
	ret := _m.Called(ctx, filter)

	var r0 []OrderOutputGraph
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, OrderFilterCtrl) ([]OrderOutputGraph, int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, OrderFilterCtrl) []OrderOutputGraph); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]OrderOutputGraph)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, OrderFilterCtrl) int64); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, OrderFilterCtrl) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProductCategoryByName provides a mock function with given fields: ctx, name
func (_m *MockIController) GetProductCategoryByName(ctx context.Context, name string) (PCateOutput, error) {
	ret := _m.Called(ctx, name)

	var r0 PCateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (PCateOutput, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) PCateOutput); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(PCateOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: ctx, filter
func (_m *MockIController) GetProducts(ctx context.Context, filter ProductCtrlFilter) ([]ProductOutput, error) {
	ret := _m.Called(ctx, filter)

	var r0 []ProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ProductCtrlFilter) ([]ProductOutput, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ProductCtrlFilter) []ProductOutput); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ProductCtrlFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsGraph provides a mock function with given fields: ctx, pFilter
func (_m *MockIController) GetProductsGraph(ctx context.Context, pFilter ProductCtrlFilter) ([]ProductOutputGraph, error) {
	ret := _m.Called(ctx, pFilter)

	var r0 []ProductOutputGraph
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ProductCtrlFilter) ([]ProductOutputGraph, error)); ok {
		return rf(ctx, pFilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ProductCtrlFilter) []ProductOutputGraph); ok {
		r0 = rf(ctx, pFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ProductOutputGraph)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ProductCtrlFilter) error); ok {
		r1 = rf(ctx, pFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *MockIController) GetUser(ctx context.Context, id int) (UserOutput, error) {
	ret := _m.Called(ctx, id)

	var r0 UserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (UserOutput, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) UserOutput); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(UserOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportProductsFromCSV provides a mock function with given fields: ctx, file
func (_m *MockIController) ImportProductsFromCSV(ctx context.Context, file multipart.File) error {
	ret := _m.Called(ctx, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, multipart.File) error); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendEmailOrder provides a mock function with given fields: ctx, emailTo, order, orderItem
func (_m *MockIController) SendEmailOrder(ctx context.Context, emailTo string, order models.Order, orderItem []repositories.OrderItem) error {
	ret := _m.Called(ctx, emailTo, order, orderItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Order, []repositories.OrderItem) error); ok {
		r0 = rf(ctx, emailTo, order, orderItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendEmailProduct provides a mock function with given fields: emailToList, reader
func (_m *MockIController) SendEmailProduct(emailToList []string, reader io.Reader) error {
	ret := _m.Called(emailToList, reader)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, io.Reader) error); ok {
		r0 = rf(emailToList, reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrder provides a mock function with given fields: ctx, orderID, orderInput
func (_m *MockIController) UpdateOrder(ctx context.Context, orderID int, orderInput OrderInput) error {
	ret := _m.Called(ctx, orderID, orderInput)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, OrderInput) error); ok {
		r0 = rf(ctx, orderID, orderInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProduct provides a mock function with given fields: ctx, pInput
func (_m *MockIController) UpdateProduct(ctx context.Context, pInput ProductInput) error {
	ret := _m.Called(ctx, pInput)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ProductInput) error); ok {
		r0 = rf(ctx, pInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockIController interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIController creates a new instance of MockIController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIController(t mockConstructorTestingTNewMockIController) *MockIController {
	mock := &MockIController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
